import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import (accuracy_score, precision_score,
                             recall_score, f1_score, roc_auc_score,
                             confusion_matrix, RocCurveDisplay)
from sklearn.preprocessing import LabelEncoder

st.title('ü´Ä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π')
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥–µ–ª–∏ Random Forest –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.
–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. 
_–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–ª–∏—á–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞._
""")


# –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    data = pd.read_csv("heart.csv")

    # –∫–æ–¥–∏—Ä—É–µ–º –≤—Å—è–∫–æ–µ
    le = LabelEncoder()
    data['Sex'] = le.fit_transform(data['Sex'])
    data['ExerciseAngina'] = le.fit_transform(data['ExerciseAngina'])

    # One-Hot Encoding
    data = pd.get_dummies(data, columns=['ChestPainType', 'RestingECG', 'ST_Slope'])

    return data


data = load_data()

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X = data.drop('HeartDisease', axis=1)
y = data['HeartDisease']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–æ–¥–µ–ª–∏
st.sidebar.header('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏–∫–∞—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏')
n_estimators = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤', 10, 500, 100, 10)
max_depth = st.sidebar.slider('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞', 1, 20, 5)
min_samples_split = st.sidebar.slider('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è', 2, 10, 2)
min_samples_leaf = st.sidebar.slider('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –ª–∏—Å—Ç–µ', 1, 10, 1)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
model = RandomForestClassifier(
    n_estimators=n_estimators,
    max_depth=max_depth,
    min_samples_split=min_samples_split,
    min_samples_leaf=min_samples_leaf,
    random_state=42
)
model.fit(X_train, y_train)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_proba)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
st.header('üìä –ö—Ä—É—Ç–µ–π—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏')
col1, col2, col3, col4, col5 = st.columns(5)
col1.metric("Accuracy", f"{accuracy:.3f}")
col2.metric("Precision", f"{precision:.3f}")
col3.metric("Recall", f"{recall:.3f}")
col4.metric("F1-score", f"{f1:.3f}")
col5.metric("ROC-AUC", f"{roc_auc:.3f}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
st.header('üìà –ß–µ—Ç–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')

# ROC-–∫—Ä–∏–≤–∞—è
st.subheader('ROC-–∫—Ä–∏–≤–∞—è')
roc_fig = plt.figure(figsize=(8, 6))
RocCurveDisplay.from_estimator(model, X_test, y_test, ax=plt.gca())
plt.plot([0, 1], [0, 1], linestyle='--')
st.pyplot(roc_fig)

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
st.subheader('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (–Ω–∞ –æ—à–∏–±–∫–∞—Ö –Ω–∞–¥–æ —É—á–∏—Ç—å—Å—è)')
cm = confusion_matrix(y_test, y_pred)
cm_fig = plt.figure(figsize=(6, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['–ó–¥–æ—Ä–æ–≤', '–ë–æ–ª–µ–Ω'],
            yticklabels=['–ó–¥–æ—Ä–æ–≤', '–ë–æ–ª–µ–Ω'])
plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–∏–∑ –ø–µ—á–µ–Ω—å—è)')
plt.ylabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
st.pyplot(cm_fig)

# –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.subheader('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({'–ü—Ä–∏–∑–Ω–∞–∫': features, '–í–∞–∂–Ω–æ—Å—Ç—å': importances})
importance_df = importance_df.sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False).head(10)

importance_fig = plt.figure(figsize=(10, 6))
sns.barplot(x='–í–∞–∂–Ω–æ—Å—Ç—å', y='–ü—Ä–∏–∑–Ω–∞–∫', data=importance_df)
plt.title('–¢–æ–ø-10 –≤–∞–∂–Ω–µ–π—à–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
st.pyplot(importance_fig)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
st.header('üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–≥–∞–¥–∞–µ–º –Ω–∞ –ª–∏—Å—Ç—å—è—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)')

st.markdown("""
–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:
""")

col1, col2 = st.columns(2)

with col1:
    age = st.number_input('–í–æ–∑—Ä–∞—Å—Ç (Age)', min_value=20, max_value=100, value=50)
    sex = st.selectbox('–ü–æ–ª (Sex)', ['M', 'F'])
    chest_pain = st.selectbox('–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏ (ChestPainType)', ['ATA', 'NAP', 'ASY', 'TA'])
    resting_bp = st.number_input('–î–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ (RestingBP)', min_value=80, max_value=200, value=120)
    cholesterol = st.number_input('–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω (Cholesterol)', min_value=100, max_value=600, value=200)

with col2:
    fasting_bs = st.selectbox('–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –Ω–∞—Ç–æ—â–∞–∫ > 120 –º–≥/–¥–ª (FastingBS)', [0, 1])
    resting_ecg = st.selectbox('–≠–ö–ì –≤ –ø–æ–∫–æ–µ (RestingECG)', ['Normal', 'ST', 'LVH'])
    max_hr = st.number_input('–ú–∞–∫—Å. –ß–°–° (MaxHR)', min_value=60, max_value=220, value=150)
    exercise_angina = st.selectbox('–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ (ExerciseAngina)', ['N', 'Y'])
    oldpeak = st.number_input('–î–µ–ø—Ä–µ—Å—Å–∏—è ST (Oldpeak)', min_value=0.0, max_value=6.0, value=1.0)
    st_slope = st.selectbox('–ù–∞–∫–ª–æ–Ω —Å–µ–≥–º–µ–Ω—Ç–∞ ST (ST_Slope)', ['Up', 'Flat', 'Down'])

if st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å'):
    sex_encoded = 1 if sex == 'M' else 0
    exercise_angina_encoded = 1 if exercise_angina == 'Y' else 0

    #  DataFrame —Å  –¥–∞–Ω–Ω—ã–º–∏
    input_data = {
        'Age': age,
        'Sex': sex_encoded,
        'RestingBP': resting_bp,
        'Cholesterol': cholesterol,
        'FastingBS': fasting_bs,
        'MaxHR': max_hr,
        'ExerciseAngina': exercise_angina_encoded,
        'Oldpeak': oldpeak,
        'ChestPainType_ATA': 1 if chest_pain == 'ATA' else 0,
        'ChestPainType_NAP': 1 if chest_pain == 'NAP' else 0,
        'ChestPainType_ASY': 1 if chest_pain == 'ASY' else 0,
        'ChestPainType_TA': 1 if chest_pain == 'TA' else 0,
        'RestingECG_Normal': 1 if resting_ecg == 'Normal' else 0,
        'RestingECG_ST': 1 if resting_ecg == 'ST' else 0,
        'RestingECG_LVH': 1 if resting_ecg == 'LVH' else 0,
        'ST_Slope_Flat': 1 if st_slope == 'Flat' else 0,
        'ST_Slope_Up': 1 if st_slope == 'Up' else 0,
        'ST_Slope_Down': 1 if st_slope == 'Down' else 0
    }

    # DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    input_df = pd.DataFrame([input_data])

    for col in X.columns:
        if col not in input_df.columns:
            input_df[col] = 0

    # —É–ø–æ—Ä—è–¥ –∫–æ–ª–æ–Ω–æ–∫ –∫–∞–∫ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    input_df = input_df[X.columns]

    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    if prediction == 1:
        st.error(f'üö® –†–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {probability:.1%}. –û—Ç–¥—ã—Ö–∞–π—Ç–µ –±–æ–ª—å—à–µ!!!')
    else:
        st.success(f'‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {1 - probability:.1%}. –í–æ—Ç —ç—Ç–æ –≤—ã –º–æ–ª–æ–¥–µ—Ü!')